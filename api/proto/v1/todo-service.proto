syntax = "proto3";

option go_package = "./v1";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "ToDo Service";
        version: "1.0";
        contact: {
            name: "ToDo Service";
            url: "https://github.com/adamlahbib/go-grpc-todo";
            email: "contact@adamlahbib.me"
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
        key: "404";
        value: {
            description: "Returned when the resource is not found.";
            schema: {
                json_schema: {
                    type: STRING;
                }
            }
        }
    }
};

// service for managing tasks
service ToDoService {
    rpc ReadAll(ReadAllRequest) returns (ReadAllResponse) {
        option (google.api.http) = {
            get: "/v1/todo/all";
        };
    };
    rpc Create(CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/v1/todo";
            body: "*";
        };
    };
    rpc Read(ReadRequest) returns (ReadResponse) {
        option (google.api.http) = {
            get: "/v1/todo/{id}";
        };
    };
    rpc Update(UpdateRequest) returns (UpdateResponse) {
        option (google.api.http) = {
            put: "/v1/todo/{todo.id}";
            body: "*";
            additional_bindings {
                patch: "/v1/todo/{todo.id}";
                body: "*";
            }
        };
    };
    rpc Delete(DeleteRequest) returns (DeleteResponse) {
        option (google.api.http) = {
            delete: "/v1/todo/{id}";
        };
    };
}

// tasks we need to do
message ToDo {
    // unique identifier
    int64 id = 1;
    // title of the task
    string title = 2;
    // description of the task
    string description = 3;
    // date and time to complete the task
    google.protobuf.Timestamp deadline = 4;
}

// request data for creating a new task
message CreateRequest {
    // task to create
    ToDo todo = 1;
}

// response data for creating a new task
message CreateResponse {
    // id of the created task
    int64 id = 1;
}

// request data for reading an existing task
message ReadRequest {
    // id of the task to read
    int64 id = 1;
}

// response data for reading an existing task containing the task data specified by the id back in request
message ReadResponse {
    // task data read by the id
    ToDo todo = 1;
}

// request data for updating an existing task
message UpdateRequest {
    // task to update
    ToDo todo = 1;
}

// response data for updating an existing task containing the status of the update operation
message UpdateResponse {
    // status of the update operation
    bool updated = 1;
}

// request data for deleting an existing task
message DeleteRequest {
    // id of the task to delete
    int64 id = 1;
}

// response data for deleting an existing task containing the status of the delete operation
message DeleteResponse {
    // status of the delete operation
    bool deleted = 1;
}

// request data for listing all tasks
message ReadAllRequest {
}

// response data for listing all tasks containing the list of tasks
message ReadAllResponse {
    // list of tasks
    repeated ToDo todos = 2;
}